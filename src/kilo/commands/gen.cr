require "big"

module Kilo
  # The command for generation of combinational data. We use two filters.
  #
  # - `balance_score` which allows us to filter based on the difference
  #   between left and right hand balance. The default can be set in
  #   `config.yaml`. But a maximum of 60 40 distribution is about right.
  #
  # - alternation_score, if a candidate passes the first filter,
  #   we try to find the best alternation.  Again can be configured
  #   in `config.yaml` and can be found by trial and error, but above
  #   80% seems to be good, we don't want to capture too many candidates
  #   anyway, only the top ones.
  #
  # Candidates that pass both tests are then written to CANDIDATES_FILE
  # their balance and alternation scores.
  #
  # By default we use the top 32 characters but assuming that the
  # layout will have a left+right space, whether the spacebar or two
  # keys on on the left and the other on the right. The characters
  # are organized according to best effort.
  #
  # We can use a Fast filter that is generated by analysing the
  # generated data and can be added to your config file with --print-fast
  # then used with --fast option later.
  class Gen < Command
    @selected_candidates : Int64 = 0
    @balance_score : BalanceFilter = BalanceFilter.new
    @alternation_score : AlternationFilter = AlternationFilter.new

    @candidates = Array(Tuple(UInt32, Int16)).new

    @fast_export = Hash(Array(UInt8), Int32).new
    @fast_filter = FastFilter.new(Array(Array(Int32)).new)

    @left_32_index_by_weight : Array(Int32)
    @right_32_index_by_weight : Array(Int32)

    alias FastFilterConfType = Array(Array(Int32))

    def initialize
      super

      left_to_32 = ProjectConfig.instance.config[:left_to_32]
      right_to_32 = ProjectConfig.instance.config[:right_to_32]

      @left_32_index_by_weight = Utils.index_by_weight(side_to_32: left_to_32)
      @right_32_index_by_weight = Utils.index_by_weight(side_to_32: right_to_32)
    end

    def run(
      global_opts : OptionsHash,
      opts : OptionsHash,
      args : Array(String)
    ) : Nil
      assert_inside_project_dir()
      opts_args(global_opts, opts, args)

      user_characters = ProjectConfig.instance.config[:characters].split("")

      filter_characters(user_characters)

      if @opts["best"].to_s.to_i != 0
        print_candidates()
        Comandante::Cleaner.exit_success
      elsif @opts["export-fast"]
        export_fast()
        Comandante::Cleaner.exit_success
      end

      Helper.timer { do_gen }
    end

    # Checks in db if file was generated before
    private def generated? : Bool
      if File.file? CANDIDATES_FILE
        return true
      else
        return false
      end
    end

    # Assumes array is sorted, creates a u32 layout
    private def left_array_to_u32(layout)
      u32 = 0.to_u32
      mask1 = 1.to_u32
      layout.each do |i|
        u32 |= mask1 << i
      end
      return u32
    end

    private def setup_fast_filter : Nil
      fast_file = @opts["fast"].to_s
      if fast_file != ""
        Helper.assert_file(fast_file)
        _tmp = Helper::YamlTo(FastFilterConfType).load(File.read(fast_file),
          fast_file)
        @fast_filter = FastFilter.new(_tmp)
      end
    end

    private def do_gen : Nil
      total_candidates = 0

      if generated?
        STDERR.puts("* #{CANDIDATES_FILE} is already generated [skipping]".colorize(:yellow))
      else
        setup_fast_filter

        @balance_score = BalanceFilter.new(
          characters: @characters,
          delta: ProjectConfig.instance.config[:balance_delta],
        )

        @alternation_score = AlternationFilter.new(
          characters: @characters,
          bigrams: @bigrams,
          min: ProjectConfig.instance.config[:alternation_min],
          max: ProjectConfig.instance.config[:alternation_max],
        )

        list = [] of Int32
        0.upto(31).each { |i| list << i }

        r = ProjectConfig.instance.config[:left_to_32].size

        puts "* will generate %s combinations" % Utils.calculate_ncr(32, r)

        i = 0.to_i128

        Helper.timer do
          list.each_combination(r, reuse: true) do |x|
            scan(left_array_to_u32(x))
            total_candidates += 1
            if (total_candidates % 10_000_000) == 0
              unless @opts["dryrun"]
                Helper.write_msgpack(@candidates, CANDIDATES_FILE, "w")
              end
              puts "left: " + x.inspect
            end
          end
        end

        puts
        STDERR.puts "* selected %s out %s" % [@selected_candidates, total_candidates]
        compact_candidates
      end
    end

    private def candidate_best_effort(candidate)
      chars = @characters.sorted
      layout = candidate[0]

      left, right = Utils.u32_to_lr(layout)

      if @opts["export-fast"]
        key = left[0..4]

        unless @fast_export.has_key? key
          @fast_export[key] = 0
        end
        @fast_export[key] += 1
        return
      end

      left, right = Utils.get_best_effort(left,
        right,
        @left_32_index_by_weight,
        @right_32_index_by_weight)

      puts Utils.lr_to_string(left, right, chars) + " candidate#{@selected_candidates}"
      @selected_candidates += 1
    end

    private def read_candidates
      unless File.file? CANDIDATES_FILE
        Cleaner.exit_failure("no such file '#{CANDIDATES_FILE}'")
      end

      @candidates = Helper.read_msgpack(CANDIDATES_FILE, @candidates)
    end

    # for now we load from file, but they should already be there
    private def print_candidates
      read_candidates
      max = @opts["best"].to_s.to_i

      0.upto(max - 1) do |i|
        candidate_best_effort(@candidates[i])
      end
    end

    # exports fast
    private def export_fast
      read_candidates

      @candidates.each do |x|
        candidate_best_effort(x)
      end

      x = @fast_export.to_a.sort { |a, b| b[1] <=> a[1] }.map { |x| x[0] }
      puts x.to_yaml
    end

    private def compact_candidates : Nil
      return if @opts["dryrun"]

      # compact file
      @candidates.uniq!
      @candidates.sort! { |a, b| b[1] <=> a[1] }
      Helper.write_msgpack(@candidates, CANDIDATES_FILE, "w")
    end

    @[AlwaysInline]
    private def db_save(layout : UInt32) : Nil
      @candidates << {layout, @alternation_score.score}
    end

    @[AlwaysInline]
    private def scan(layout : UInt32) : Nil
      if @opts["fast"].to_s != ""
        return unless @fast_filter.pass? layout
      end

      return unless @balance_score.pass? layout

      return unless @alternation_score.pass? layout

      puts "alt: %s" % @alternation_score.score if @opts["dryrun"]

      @selected_candidates += 1

      db_save(layout) unless @opts["dryrun"]
    end
  end
end
